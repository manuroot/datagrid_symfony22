<?php

namespace Application\EpostBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EpostNotesRepository extends EntityRepository {

       public function getMyPager(array $criteria) {

        $parameters = array();
        $query = $this->createQueryBuilder('a')
                ->select('a,b,c')
                   ->leftJoin('a.epost', 'b')
                   ->add('orderBy', 'a.id DESC')
                //->where('a.proprietaire = :proprietaire')
                ->leftJoin('a.proprietaire', 'b')
              //  ->leftJoin($join, $alias, $conditionType)
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->leftJoin('a.globalnote', 'e')
                ->leftJoin('a.imageMedia', 'f')
                ->leftJoin('a.tags', 't')
                ->leftJoin('a.comments', 'u')
                ->groupby('a.name')
                ;

        // ->setParameter('proprietaire', $criteria['author']);
        /* ->getQuery(); */
        // $parameters['proprietaire'] = $criteria['author'];
        if (isset($criteria['author'])) {
            //  print_r($criteria);exit(1);
            $query->andwhere('a.proprietaire = :proprietaire');
            $parameters['proprietaire'] = $criteria['author'];
        }


        if (isset($criteria['non-author'])) {
            //  print_r($criteria);exit(1);
            $query->andWhere('a.proprietaire <> :user_id');
            $parameters['user_id'] = $criteria['non-author'];
        }


        if (isset($criteria['group'])) {
            $query->andWhere('b.idgroup = :group_id');
            $parameters['group_id'] = $criteria['group'];
        }

        if (isset($criteria['categorie']) && $criteria['categorie'] instanceof EpostCategories) {
            $query->andWhere('a.categorie = :categoryid');
            $parameters['categoryid'] = $criteria['categorie']->getId();
        }
        if (isset($criteria['tag'])) {
            //    $query->leftJoin('a.tags', 't');
            $query->andWhere('t.id =:tag');
            //   ->groupby('a.name');

            $parameters['tag'] = (string) $criteria['tag'];
        }
        $query->setParameters($parameters);
        //>getQuery();
        //  print_r($query->getQuery());
        //  exit(1);
         return $query->getQuery();
        //return $query->getQuery()->getResult();
    }
    
    
    public function myFindAll() {
        return $this->createQueryBuilder('a')
                
                 // ->select('a,b')
                  
                   ->select('a,b,c,d,e')
              
                //->where('a.proprietaire = :proprietaire')
              /*  ->leftJoin('a.proprietaire', 'b')
              //  ->leftJoin($join, $alias, $conditionType)
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->leftJoin('a.globalnote', 'e')
                ->leftJoin('a.imageMedia', 'f')
                ->leftJoin('a.tags', 't')
                ->leftJoin('a.comments', 'u')
                ->groupby('a.name')
                */
                
                  ->leftJoin('a.epost', 'b')
                   ->leftJoin('b.imageMedia', 'c')
                ->leftJoin('b.proprietaire', 'd')
                   ->leftJoin('b.globalnote', 'e')
                // ->leftJoin('a.epost', 'b')
                        ->getQuery();

        //->getResult();
    }

    public function getUserNotesForEpost($user_id, $epost_id) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.user = :userId')
                ->addOrderBy('c.isComment')
                ->addOrderBy('c.created')
                ->setParameter('produit_id', $epost_id);

        if (false === is_null($approved))
            $qb->andWhere('c.approved = :approved')
                    ->setParameter('approved', $approved);

        return $qb->getQuery()
                        ->getResult();
    }

    public function getNotesForEpost($epost_id) {

        $count = 0;
        $note_globale = 0;
        $query = $this->createQueryBuilder('a')
                ->select('a.id,a.note')
                ->leftJoin('a.epost', 'b')
                ->where('b.id = :id_post')
                ->setParameter('id_post', $epost_id);

        //    $nb_result=count($query->getResult());
        foreach ($query->getQuery()->getResult() as $d) {
            $count++;
            $note_globale +=$d['note'];
            //     echo "postid=$epost_id note=" . $d['note'] . "<br>";
        }
        if ($count > 0) {
            $note_globale = (int) ($note_globale / $count);
        } else {
            $note_globale = 0;
        }
        //  echo "note globale=$note_globale<br>";
        return $note_globale;
        // exit(1);
        /* return $query > getQuery()
          ->getResult(); */
    }

}

