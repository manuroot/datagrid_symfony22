<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\EpostBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */
class EpostRepository extends EntityRepository {

    public function myFind() {

        $query = $this->createQueryBuilder('a')
                ->leftJoin('a.proprietaire', 'b')
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->add('orderBy', 'a.id DESC')
                ->getQuery();
        return $query;
    }
    
       public function myFindActif() {
//true ==>1 post actif (form case cochéé)
           // false ==> 0 case decochée
        $query = $this->createQueryBuilder('a')
                ->where('a.isvisible = true')
                ->leftJoin('a.proprietaire', 'b')
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->add('orderBy', 'a.id DESC')
                 
                ->getQuery();
        return $query;
    }

    public function myFindAll($user_id) {

        $query = $this->createQueryBuilder('a')
                ->add('orderBy', 'a.id DESC')
                ->where('a.proprietaire = :proprietaire')
                ->leftJoin('a.proprietaire', 'b')
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->setParameter('proprietaire', $user_id)
                ->getQuery();

        return $query;

        /* $query = $this->createQueryBuilder('a')
          ->add('orderBy', 'a.id DESC');

          if (isset($user_id)){
          $query=$query->where('a.proprietaire = :proprietaire')
          ->setParameter('proprietaire', $user_id);


          }
          ->getQuery(); */
     
    }

    public function myFindOtherAll($user_id, $group_id) {

        $query = $this->createQueryBuilder('a')
                ->where('a.proprietaire <> :proprietaire')
                ->setParameter('proprietaire', $user_id)
                //  ->where('a.proprietaire.getId = :idproprietaire')
                //       ->setParameter('idproprietaire', '2')
                ->leftJoin('a.proprietaire', 'b')
                ->andWhere('b.idgroup = :groupid')
                ->setParameter('groupid', $group_id)
                /*
                  ->leftJoin('a.notes', 'e')
                  ->andWhere('e.user  <> :proprietaire')
                  ->setParameter('proprietaire', $user_id)
                 */
                ->leftJoin('a.categorie', 'c')
                ->leftJoin('a.idStatus', 'd')
                ->add('orderBy', 'a.id DESC')
                ->getQuery();
        return $query;
    }

    /*
     * 
     *        //    ->leftJoin('u.produit', 'a')
      //  ->leftJoin('a.proprietaire', 'v')
      ->where('u.proprietaire = :proprietaire')
      ->setParameter('proprietaire', $user_id)
     */
    /* public function myFindAll($user_id) {

      $query = $this->createQueryBuilder('a')
      ->where('a.demandeur = :demandeur')
      ->setParameter('demandeur', $user_id)
      //->orderBy('p.price', 'ASC')
      ->getQuery();
      return $query;

      } */

    public function findaByYear($year) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p.id,p.createdAt');
        $arr = array();

        foreach ($qb->getQuery()->getResult() as $d) {
            $year = $d['createdAt']->format('Y');
            //  $cat=$d['category'];
            if (!(isset($arr["$year"])))
                $arr["$year"] = 0;
            $arr["$year"] = $arr["$year"] + 1;
       return ($arr);
        }
    }
    
    public function getLatestBlogs($limit = null)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('b')
                   ->addOrderBy('b.createdAt', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
                  ->getResult();
    }
    }