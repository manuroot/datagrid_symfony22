<?php

/**
 * This file is part of the <name> project.
 *
 * (c) <yourname> <youremail>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Application\EpostBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use FOS\CommentBundle\Entity\Comment as BaseComment;
use FOS\CommentBundle\Model\SignedCommentInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use FOS\CommentBundle\Model\VotableCommentInterface;

/**
 * This file has been generated by the Sonata EasyExtends bundle ( http://sonata-project.org/bundles/easy-extends )
 *
 * References :
 *   working with object : http://www.doctrine-project.org/projects/orm/2.0/docs/reference/working-with-objects/en
 *
 * @author <yourname> <youremail>
 */

/**
 * @ORM\Table(name="epost_commentsthread")
 * @ORM\Entity
 *
 * @ORM\ChangeTrackingPolicy("DEFERRED_EXPLICIT")
 */

class EpostCommentsThread extends BaseComment  implements VotableCommentInterface
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * Thread of this comment
     *
     * @var Thread
     * 
     * @ORM\ManyToOne(targetEntity="EpostThread")
     *   @ORM\JoinColumn(name="thread_id", referencedColumnName="id")
     */
    protected $thread;

  
      
    /**
     * @ORM\ManyToOne(targetEntity="Epost", inversedBy="commentsthread")
     * @ORM\JoinColumn(name="epost_id", referencedColumnName="id")
     */
    protected $epost;
    
    /**
     * Author of the comment
     *
      * @ORM\ManyToOne(targetEntity="Application\Sonata\UserBundle\Entity\User")
     * @var User
     */
    protected $author;
    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

   
  

    
    /**
     * Set epost
     *
     * @param \Application\EpostBundle\Entity\Epost $epost
     * @return EpostCommentsThread
     */
    public function setEpost(\Application\EpostBundle\Entity\Epost $epost = null)
    {
        $this->epost = $epost;
    
        return $this;
    }

    /**
     * Get epost
     *
     * @return \Application\EpostBundle\Entity\Epost 
     */
    public function getEpost()
    {
        return $this->epost;
    }

  public function setAuthor(UserInterface $author)
    {
        $this->author = $author;
    }

    public function getAuthor()
    {
        return $this->author;
    }

    public function getAuthorName()
    {
        if (null === $this->getAuthor()) {
            return 'Anonymous';
        }

        return $this->getAuthor()->getUsername();
    }

  /**
     * @ORM\Column(type="integer")
     * @var int
     */
    protected $score = 0;

    /**
     * Sets the score of the comment.
     *
     * @param integer $score
     */
    public function setScore($score)
    {
        $this->score = $score;
    }

    /**
     * Returns the current score of the comment.
     *
     * @return integer
     */
    public function getScore()
    {
        return $this->score;
    }

    /**
     * Increments the comment score by the provided
     * value.
     *
     * @param integer value
     *
     * @return integer The new comment score
     */
    public function incrementScore($by = 1)
    {
        $this->score += $by;
    }

}